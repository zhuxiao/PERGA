PERGA - Paired End Reads Guided Assembler
============================


PERGA is a novel sequence reads guided de novo assembly approach which adopts greedy-like prediction strategy for assembling reads to contigs and scaffolds. Instead of using single-end reads to construct contig, PERGA uses paired-end reads and different read overlap sizes from O â‰¥ Omax to Omin to resolve the gaps and branches. Moreover, by constructing a decision model using machine learning approach based on branch features, PERGA can determine the correct extension in 99.7% of cases. PERGA will also try to extend the contigs by all feasible nucleotides and determine if these multiple extensions due to sequencing errors or repeats by using looking ahead technology.

The simulated paired-end reads data are generated using GemSim (KE McElroy, F Luciani, T Thomas. Gemsim: General, Error-Model Based Simulator of Next-Generation Sequencing Data. BMC Genomics 2012, 13:74), with coverage 50x, 60x, 100x, read lengths 100-bp, and can be downloaded from https://github.com/zhuxiao/data_PERGA.

The real paired-end reads data can be downloaded from http://bix.ucsd.edu/projects/singlecell/nbt_data.html, with standard genomic DNA prepared from culture, with coverage ~600x. The downloaded paired ends of file 'ecoli_ref.fastq' were separated into two reads files 'ecoli_ref_1.fastq' and 'ecoli_ref_2.fastq'. The real data were corrected using Quake (DR Kelley, MC Schatz, SL Salzberg. Quake: Quality-Aware Detection and Correction of Sequencing Errors. Genome Biol 2010, 11(11):-) by the follwing commands:
	(1) $ cat ecoli_ref_1.fastq ecoli_ref_2.fastq | count-qmers -k 15 -q 33 > count_file_ecoli_ref
	(2) $ cov_model.py count_file_ecoli_ref
	(3) $ correct -f readsfiles_ecoli_ref -k 15 -c 25 -m count_file_ecoli_ref -p 8
where, 'readsfiles_ecoli_ref' contained the two paired end files 'ecoli_ref_1.fastq' and 'ecoli_ref_2.fastq' and were separated by the tab character in a single line as following:
ecoli_ref_1.fastq	ecoli_ref_2.fastq

The corrected reads data are used to do the assembly.


-------------
Compiling PERGA

You can generate the binary file by typing:
./autogen.sh

and the binary files and the navigation model will be output into the folder 'bin'.

-------------
See user manual in [PERGA_Manual.pdf] in the archive.

And report bugs or give suggestions to ydwang@hit.edu.cn.

